image:
  name: docker/compose:1.29.2
  # Override the entrypoint (important)
  entrypoint: [""]

# Must have this service
# Note: --privileged is required for Docker-in-Docker to function properly,
# but it should be used with care as it provides full access to the host environment
services:
  - docker:dind

stages:
  - build
  - test
  - deploy

variables:
  # DOCKER_HOST is essential
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  # SQL stuff for testing in a local db
  MYSQL_DATABASE: "mp-test"
  MYSQL_ROOT_PASSWORD: "test root password"
  MYSQL_USER: "moneyprinter"
  MYSQL_PASSWORD: "mp!QAZxsw2"
  MYSQL_HOST: mysql

before_script:
  # First test that gitlab-runner has access to Docker
  - docker --version
  # Login to the Gitlab registry and pull existing images to use as cache
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  script:
    # Pull the image for the build cache, and continue even if this image download fails (it'll fail the very first time)
    - docker pull api || true
    - docker pull client || true
    - docker pull data_server || true
    - docker pull task_runner || true
    - docker pull scheduler || true
    # Build and push Docker images to the Gitlab registry
    - docker-compose -f $($CI_PROJECT_DIR)/docker/docker-compose.yml --profile dev build
    - docker push api
    - docker push client
    - docker push data_server
    - docker push task_runner
    - docker push scheduler
  #only:
  #  - master

test:
  stage: test
  script:
    # Pull the images
    - docker pull api
    - docker pull client
    - docker pull data_server
    - docker pull task_runner
    - docker pull scheduler
    # Start the containers and run the tests before deployment
    - docker-compose -f $($CI_PROJECT_DIR)/docker/docker-compose.yml --profile dev up api -d
    - docker-compose -f $($CI_PROJECT_DIR)/docker/docker-compose.yml --profile dev up db -d
    - docker exec --tty $(docker-compose -f $CI_PROJECT_DIR/docker/docker-compose.yml ps -q db) mysql --user=$MYSQL_USER --password=$MYSQL_PASSWORD --database=$MYSQL_DATABASE --host=$MYSQL_HOST --execute="ALTER USER '$MYSQL_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_PASSWORD'"
    - docker exec --tty $(docker-compose -f $CI_PROJECT_DIR/docker/docker-compose.yml ps -q api) /bin/bash -c "cd app && MP_ENVIRONMENT=test PYTHONPATH="$PYTHONPATH:/app" pytest ./tests"
    - docker-compose -f $($CI_PROJECT_DIR)/docker/docker-compose.yml --profile dev down api
    - docker-compose -f $($CI_PROJECT_DIR)/docker/docker-compose.yml --profile dev down db
  #only:
  #  - master

deploy_staging:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release\//'
      when: manual
  stage: deploy
  script:
    - echo 'Deploy to ECS staging env'
    # - bash deploy.staging.sh

deploy_prod:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release\//'
      when: manual
  stage: deploy
  script:
    - bash deploy.prod.sh
