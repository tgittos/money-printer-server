image: git.gittos.net:5050/tgittos/gittos.net/runner-base:latest

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_LATEST_IMAGE: "$CI_REGISTRY_IMAGE/mp-api:latest"
  CONTAINER_RELEASE_IMAGE: "$CI_REGISTRY_IMAGE/mp-api:$CI_COMMIT_TAG"

services:
  - docker:dind

before_script:
    - |
      docker version
      docker-compose version
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

stages:
  - build
  - test
  - release
  - deploy-staging
  - deploy-production

build:
  stage: build
  script:
    - |
      echo "Building api container"
      npm run down
      npm run build api
      echo "Pushing to repository: $CONTAINER_LATEST_IMAGE"
      docker push $CONTAINER_LATEST_IMAGE
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always

test:
  stage: test
  script:
    - |
      npm run down
      docker pull $CONTAINER_LATEST_IMAGE
      npm run up api
      sleep 10
      npm run db:init
      status=$(npm run test:ci)
      echo status: $status
      npm run down
      exit $status
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

release:
  stage: release
  script:
    - |
      echo "Pulling test image $CONTAINER_LATEST_IMAGE"
      docker pull $CONTAINER_LATEST_IMAGE
      echo "Tagging as release $CONTAINER_RELEASE_IMAGE"
      docker tag $CONTAINER_LATEST_IMAGE $CONTAINER_RELEASE_IMAGE
      echo "Pushing to $CONTAINER_RELEASE_IMAGE"
      docker push $CONTAINER_RELEASE_IMAGE
  rules:
    # always release if the commit was tagged
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "master"'
      when: always
    # allow manual releasing from the main branch
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_REF_NAME == "master"'
      when: manual
      allow_failure: true
